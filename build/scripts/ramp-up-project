#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   ramp-up-project start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh ramp-up-project
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and RAMP_UP_PROJECT_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}.." && pwd -P ) || exit

APP_NAME="ramp-up-project"
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and RAMP_UP_PROJECT_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/lib/ramp-up-project.jar:$APP_HOME/lib/dropwizard-migrations-2.1.0.jar:$APP_HOME/lib/dropwizard-hibernate-2.1.0.jar:$APP_HOME/lib/dropwizard-testing-2.1.0.jar:$APP_HOME/lib/dropwizard-core-2.1.0.jar:$APP_HOME/lib/mysql-connector-java-8.0.30.jar:$APP_HOME/lib/dropwizard-db-2.1.0.jar:$APP_HOME/lib/lombok-1.18.24.jar:$APP_HOME/lib/assertj-core-3.23.1.jar:$APP_HOME/lib/mockito-core-4.6.1.jar:$APP_HOME/lib/dropwizard-configuration-2.1.0.jar:$APP_HOME/lib/dropwizard-health-2.1.0.jar:$APP_HOME/lib/dropwizard-jersey-2.1.0.jar:$APP_HOME/lib/dropwizard-jetty-2.1.0.jar:$APP_HOME/lib/dropwizard-request-logging-2.1.0.jar:$APP_HOME/lib/dropwizard-logging-2.1.0.jar:$APP_HOME/lib/dropwizard-metrics-2.1.0.jar:$APP_HOME/lib/dropwizard-jackson-2.1.0.jar:$APP_HOME/lib/dropwizard-validation-2.1.0.jar:$APP_HOME/lib/dropwizard-servlets-2.1.0.jar:$APP_HOME/lib/dropwizard-lifecycle-2.1.0.jar:$APP_HOME/lib/dropwizard-util-2.1.0.jar:$APP_HOME/lib/metrics-jetty9-4.2.9.jar:$APP_HOME/lib/metrics-servlets-4.2.9.jar:$APP_HOME/lib/metrics-jvm-4.2.9.jar:$APP_HOME/lib/metrics-jmx-4.2.9.jar:$APP_HOME/lib/metrics-healthchecks-4.2.9.jar:$APP_HOME/lib/metrics-logback-4.2.9.jar:$APP_HOME/lib/metrics-jersey2-4.2.9.jar:$APP_HOME/lib/metrics-json-4.2.9.jar:$APP_HOME/lib/metrics-core-4.2.9.jar:$APP_HOME/lib/logback-classic-1.2.11.jar:$APP_HOME/lib/jackson-datatype-guava-2.13.2.jar:$APP_HOME/lib/jackson-jaxrs-json-provider-2.13.2.jar:$APP_HOME/lib/jackson-datatype-jsr310-2.13.2.jar:$APP_HOME/lib/jackson-datatype-jdk8-2.13.2.jar:$APP_HOME/lib/jackson-module-parameter-names-2.13.2.jar:$APP_HOME/lib/jackson-module-blackbird-2.13.2.jar:$APP_HOME/lib/jackson-datatype-joda-2.13.2.jar:$APP_HOME/lib/jackson-dataformat-yaml-2.13.2.jar:$APP_HOME/lib/jackson-jaxrs-base-2.13.2.jar:$APP_HOME/lib/jackson-module-jaxb-annotations-2.13.2.jar:$APP_HOME/lib/jackson-core-2.13.2.jar:$APP_HOME/lib/jackson-datatype-hibernate5-2.13.2.jar:$APP_HOME/lib/jackson-databind-2.13.2.2.jar:$APP_HOME/lib/jackson-annotations-2.13.2.jar:$APP_HOME/lib/guava-31.1-jre.jar:$APP_HOME/lib/jsr305-3.0.2.jar:$APP_HOME/lib/jersey-test-framework-provider-inmemory-2.35.jar:$APP_HOME/lib/jersey-test-framework-core-2.35.jar:$APP_HOME/lib/jakarta.servlet-api-4.0.4.jar:$APP_HOME/lib/jersey-bean-validation-2.35.jar:$APP_HOME/lib/hibernate-validator-6.2.3.Final.jar:$APP_HOME/lib/jersey-container-servlet-2.35.jar:$APP_HOME/lib/jersey-container-servlet-core-2.35.jar:$APP_HOME/lib/jersey-server-2.35.jar:$APP_HOME/lib/jakarta.validation-api-2.0.2.jar:$APP_HOME/lib/jersey-client-2.35.jar:$APP_HOME/lib/jersey-metainf-services-2.35.jar:$APP_HOME/lib/jersey-hk2-2.35.jar:$APP_HOME/lib/jersey-media-jaxb-2.35.jar:$APP_HOME/lib/jersey-common-2.35.jar:$APP_HOME/lib/jakarta.ws.rs-api-2.1.6.jar:$APP_HOME/lib/argparse4j-0.9.0.jar:$APP_HOME/lib/jetty-servlet-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-security-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-server-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-servlets-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-http-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-io-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-util-ajax-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-util-9.4.46.v20220331.jar:$APP_HOME/lib/jetty-setuid-java-1.0.4.jar:$APP_HOME/lib/jakarta.inject-api-1.0.5.jar:$APP_HOME/lib/jul-to-slf4j-1.7.36.jar:$APP_HOME/lib/log4j-over-slf4j-1.7.36.jar:$APP_HOME/lib/jcl-over-slf4j-1.7.36.jar:$APP_HOME/lib/slf4j-api-1.7.36.jar:$APP_HOME/lib/protobuf-java-3.19.4.jar:$APP_HOME/lib/liquibase-core-4.9.1.jar:$APP_HOME/lib/liquibase-slf4j-4.1.0.jar:$APP_HOME/lib/jakarta.xml.bind-api-2.3.3.jar:$APP_HOME/lib/tomcat-jdbc-9.0.62.jar:$APP_HOME/lib/hibernate-core-5.6.8.Final.jar:$APP_HOME/lib/javax.persistence-api-2.2.jar:$APP_HOME/lib/javassist-3.28.0-GA.jar:$APP_HOME/lib/usertype.core-7.0.0.CR1.jar:$APP_HOME/lib/jakarta.activation-api-1.2.2.jar:$APP_HOME/lib/metrics-annotation-4.2.9.jar:$APP_HOME/lib/byte-buddy-1.12.10.jar:$APP_HOME/lib/byte-buddy-agent-1.12.10.jar:$APP_HOME/lib/objenesis-3.2.jar:$APP_HOME/lib/caffeine-2.9.3.jar:$APP_HOME/lib/classmate-1.5.1.jar:$APP_HOME/lib/jakarta.el-3.0.4.jar:$APP_HOME/lib/commons-text-1.9.jar:$APP_HOME/lib/logback-access-1.2.11.jar:$APP_HOME/lib/logback-core-1.2.11.jar:$APP_HOME/lib/logback-throttling-appender-1.1.9.jar:$APP_HOME/lib/hk2-locator-2.6.1.jar:$APP_HOME/lib/hk2-api-2.6.1.jar:$APP_HOME/lib/hk2-utils-2.6.1.jar:$APP_HOME/lib/jakarta.annotation-api-1.3.5.jar:$APP_HOME/lib/joda-time-2.10.14.jar:$APP_HOME/lib/profiler-1.1.1.jar:$APP_HOME/lib/jakarta.inject-2.6.1.jar:$APP_HOME/lib/osgi-resource-locator-1.0.3.jar:$APP_HOME/lib/hibernate-commons-annotations-5.1.2.Final.jar:$APP_HOME/lib/jboss-logging-3.4.3.Final.jar:$APP_HOME/lib/tomcat-juli-9.0.62.jar:$APP_HOME/lib/javax.transaction-api-1.3.jar:$APP_HOME/lib/usertype.spi-7.0.0.CR1.jar:$APP_HOME/lib/antlr-2.7.7.jar:$APP_HOME/lib/jboss-transaction-api_1.2_spec-1.1.1.Final.jar:$APP_HOME/lib/jandex-2.4.2.Final.jar:$APP_HOME/lib/jaxb-runtime-2.3.1.jar:$APP_HOME/lib/junit-4.13.1.jar:$APP_HOME/lib/failureaccess-1.0.1.jar:$APP_HOME/lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:$APP_HOME/lib/checker-qual-3.19.0.jar:$APP_HOME/lib/error_prone_annotations-2.11.0.jar:$APP_HOME/lib/j2objc-annotations-1.3.jar:$APP_HOME/lib/snakeyaml-1.30.jar:$APP_HOME/lib/commons-lang3-3.11.jar:$APP_HOME/lib/aopalliance-repackaged-2.6.1.jar:$APP_HOME/lib/jetty-continuation-9.4.46.v20220331.jar:$APP_HOME/lib/txw2-2.3.1.jar:$APP_HOME/lib/istack-commons-runtime-3.0.7.jar:$APP_HOME/lib/stax-ex-1.8.jar:$APP_HOME/lib/FastInfoset-1.2.15.jar:$APP_HOME/lib/hamcrest-core-1.3.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and RAMP_UP_PROJECT_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $RAMP_UP_PROJECT_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        -classpath "$CLASSPATH" \
        App \
        "$@"

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $RAMP_UP_PROJECT_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
